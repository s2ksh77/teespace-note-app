import React from 'react';

const REM_UNIT = 16;

export const SearchIcon = React.memo(
  ({ width = 0.875, height = 0.875, color = '#666' }) => {
    const defaultWidth = 24;
    const defaultHeight = 24;

    return (
      <svg
        width={`${width}rem`}
        height={`${height}rem`}
        viewBox={`0 0 ${width * REM_UNIT} ${height * REM_UNIT}`}
        version="1.1"
      >
        <g
          id="Icon/common/search"
          stroke="none"
          strokeWidth="1"
          fill="none"
          fillRule="evenodd"
          transform={`scale(${(width * REM_UNIT) / defaultWidth},
          ${(height * REM_UNIT) / defaultHeight})`}
        >
          <path
            d="M10.6826,1 C16.0216,1 20.3646,5.375 20.3646,10.752 C20.3646,13.042 19.5726,15.145 18.2556,16.81 L18.2556,16.81 L22.1736,20.76 L22.7096,21.301 C23.0986,21.693 23.0966,22.326 22.7036,22.715 C22.5086,22.908 22.2546,23.005 21.9996,23.005 C21.7436,23.005 21.4856,22.906 21.2896,22.709 L21.2896,22.709 L17.8786,19.271 C17.8786,19.27 17.8776,19.269 17.8776,19.269 L17.8776,19.269 L16.8666,18.249 C15.1876,19.656 13.0326,20.504 10.6826,20.504 C5.3436,20.504 0.9996,16.129 0.9996,10.752 C0.9996,5.375 5.3436,1 10.6826,1 Z M10.6826,3 C6.4466,3 2.9996,6.478 2.9996,10.752 C2.9996,15.027 6.4466,18.504 10.6826,18.504 C14.9176,18.504 18.3646,15.027 18.3646,10.752 C18.3646,6.478 14.9176,3 10.6826,3 Z M10.284,4.5271 C10.837,4.5271 11.284,4.9751 11.284,5.5271 C11.284,6.0791 10.837,6.5271 10.284,6.5271 C8.197,6.5271 6.499,8.2421 6.499,10.3511 C6.499,10.9031 6.052,11.3511 5.499,11.3511 C4.946,11.3511 4.499,10.9031 4.499,10.3511 C4.499,7.1401 7.094,4.5271 10.284,4.5271 Z"
            id="Combined-Shape"
            fill={color}
          />
        </g>
      </svg>
    );
  },
);

export const CloseIcon = React.memo(({ width = 1, height = 1, color = '#666' }) => {
  const defaultWidth = 24;
  const defaultHeight = 24;

  return (
    <svg
      width={`${width}rem`}
      height={`${height}rem`}
      viewBox={`0 0 ${width * REM_UNIT} ${height * REM_UNIT}`}
      version="1.1"
    >
      <g
        id="Icon/common/close"
        stroke="none"
        strokeWidth="1"
        fill="none"
        fillRule="evenodd"
        transform={`scale(${(width * REM_UNIT) / defaultWidth},
          ${(height * REM_UNIT) / defaultHeight})`}
      >
        <path
          d="M4.293,19.707 C4.488,19.902 4.744,20 5,20 C5.256,20 5.512,19.902 5.707,19.707 L12,13.414 L18.293,19.707 C18.488,19.902 18.744,20 19,20 C19.256,20 19.512,19.902 19.707,19.707 C20.098,19.316 20.098,18.684 19.707,18.293 L13.414,12 L19.707,5.707 C20.098,5.316 20.098,4.684 19.707,4.293 C19.316,3.902 18.684,3.902 18.293,4.293 L12,10.586 L5.707,4.293 C5.316,3.902 4.684,3.902 4.293,4.293 C3.902,4.684 3.902,5.316 4.293,5.707 L10.586,12 L4.293,18.293 C3.902,18.684 3.902,19.316 4.293,19.707"
          id="Fill-1"
          fill={color}
        />
      </g>
    </svg>
  );
});

export const ArrowTopIcon = React.memo(({ width = 1, height = 1, color = '#666' }) => {
  const defaultWidth = 24;
  const defaultHeight = 24;

  return (
    <svg
      width={`${width}rem`}
      height={`${height}rem`}
      viewBox={`0 0 ${width * REM_UNIT} ${height * REM_UNIT}`}
      version="1.1"
    >
      <g
        id="Icon/common/arrow_top_1"
        stroke="none"
        strokeWidth="1"
        fill="none"
        fillRule="evenodd"
        transform={`scale(${(width * REM_UNIT) / defaultWidth},
          ${(height * REM_UNIT) / defaultHeight})`}
      >
        <path
          d="M18.0002,15.99161 C18.2492,15.99161 18.4982,15.89961 18.6912,15.71461 C19.0912,15.33261 19.1042,14.69961 18.7232,14.30061 L13.0632,8.39061 C12.4672,7.85961 11.5322,7.86161 10.8792,8.44661 L5.2772,14.30061 C4.8962,14.69961 4.9092,15.33261 5.3092,15.71461 C5.7062,16.09561 6.3412,16.08261 6.7232,15.68261 L11.9982,10.16561 L17.2772,15.68261 C17.4742,15.88761 17.7362,15.99161 18.0002,15.99161"
          id="Fill-1"
          fill={color}
        />
      </g>
    </svg>
  );
});

export const ArrowBottomIcon = React.memo(({ width = 1, height = 1, color = '#666' }) => {
  const defaultWidth = 24;
  const defaultHeight = 24;

  return (
    <svg
      width={`${width}rem`}
      height={`${height}rem`}
      viewBox={`0 0 ${width * REM_UNIT} ${height * REM_UNIT}`}
      version="1.1"
    >
      <g
        id="Icon/common/arrow_bottom_1"
        stroke="none"
        strokeWidth="1"
        fill="none"
        fillRule="evenodd"
        transform={`scale(${(width * REM_UNIT) / defaultWidth},
          ${(height * REM_UNIT) / defaultHeight})`}
      >
        <path
          d="M10.938,15.60149 C11.228,15.85949 11.599,15.99149 11.978,15.99149 C12.376,15.99149 12.785,15.84449 13.121,15.54449 L18.723,9.69149 C19.105,9.29149 19.09,8.65949 18.691,8.27749 C18.292,7.89549 17.66,7.91049 17.277,8.30849 L12.002,13.82649 L6.723,8.30849 C6.34,7.91049 5.708,7.89549 5.309,8.27749 C4.91,8.65949 4.896,9.29149 5.277,9.69149 L10.938,15.60149 Z"
          id="Fill-1"
          fill={color}
        />
      </g>
    </svg>
  );
});

export const ArrowBackIcon = React.memo(({ width = 1, height = 1, color = '#666' }) => {
  const defaultWidth = 24;
  const defaultHeight = 24;

  return (
    <svg
      width={`${width}rem`}
      height={`${height}rem`}
      viewBox={`0 0 ${width * REM_UNIT} ${height * REM_UNIT}`}
      version="1.1"
    >
      <g
        id="Icon/common/arrow_back_1"
        stroke="none"
        strokeWidth="1"
        fill="none"
        fillRule="evenodd"
        transform={`scale(${(width * REM_UNIT) / defaultWidth},
          ${(height * REM_UNIT) / defaultHeight})`}
      >
        <path
          d="M14.7142,5.3081 C14.3322,4.9111 13.6982,4.8951 13.3002,5.2771 L7.3912,10.9371 C6.8602,11.5331 6.8602,12.4661 7.4462,13.1201 L13.3002,18.7221 C13.4932,18.9081 13.7422,18.9991 13.9912,18.9991 C14.2542,18.9991 14.5182,18.8961 14.7142,18.6911 C15.0962,18.2911 15.0822,17.6591 14.6832,17.2771 L9.1652,12.0011 L14.6832,6.7221 C15.0822,6.3401 15.0962,5.7071 14.7142,5.3081"
          id="Fill-1"
          fill={color}
        />
      </g>
    </svg>
  );
});

export const ArrowBackIcon2 = React.memo(({ width = 1, height = 1, color = '#666' }) => {
  const defaultWidth = 24;
  const defaultHeight = 24;

  return (
    <svg
      width={`${width}rem`}
      height={`${height}rem`}
      viewBox={`0 0 ${width * REM_UNIT} ${height * REM_UNIT}`}
      version="1.1"
    >
      <g
        id="Icon/common/arrow_back_2"
        stroke="none"
        strokeWidth="1"
        fill="none"
        fillRule="evenodd"
        transform={`scale(${(width * REM_UNIT) / defaultWidth},
          ${(height * REM_UNIT) / defaultHeight})`}
      >
        <path
          d="M22.002,11.9913 C22.002,11.4393 21.554,10.9913 21.002,10.9913 L5.206,10.9913 L11.683,4.7183 C12.079,4.3343 12.089,3.7013 11.705,3.3043 C11.321,2.9073 10.688,2.8973 10.291,3.2823 L2.49,10.8373 C2.175,11.1413 2.002,11.5503 1.99998265,11.9863 C1.998,12.4213 2.169,12.8303 2.486,13.1413 L10.29,20.7183 C10.484,20.9063 10.736,21.0003 10.987,21.0003 C11.248,21.0003 11.508,20.8983 11.704,20.6963 C12.089,20.3003 12.08,19.6673 11.684,19.2823 L5.203,12.9913 L21.002,12.9913 C21.554,12.9913 22.002,12.5433 22.002,11.9913"
          id="Fill-1"
          fill={color}
        />
      </g>
    </svg>
  );
});

export const TrashIcon = React.memo(
  ({ width = 1, height = 1, color = '#666', isButton = false }) => {
    const defaultWidth = 24;
    const defaultHeight = 24;

    return (
      <svg
        style={isButton ? {} : { position: 'absolute', left: '1rem' }}
        width={`${width}rem`}
        height={`${height}rem`}
        viewBox={`0 0 ${width * REM_UNIT} ${height * REM_UNIT}`}
        version="1.1"
      >
        <g
          id="Icon/common/trash"
          stroke="none"
          strokeWidth="1"
          fill="none"
          fillRule="evenodd"
          transform={`scale(${(width * REM_UNIT) / defaultWidth},
          ${(height * REM_UNIT) / defaultHeight})`}
        >
          <path
            d="M12.0002,1 C14.9932,1 17.3382,2.757 17.3382,5 L17.3382,5 L22.0002,5 C22.5532,5 23.0002,5.448 23.0002,6 C23.0002,6.552 22.5532,7 22.0002,7 L22.0002,7 L20.4892,7 C20.4882,7.022 20.4982,7.042 20.4962,7.065 L20.4962,7.065 L19.4962,18.115 C19.5002,20.768 17.2672,23 14.5242,23 L14.5242,23 L9.4752,23 C6.7322,23 4.5002,20.768 4.5002,18.025 L4.5002,18.025 L3.5042,7.065 C3.5022,7.042 3.5122,7.022 3.5112,7 L3.5112,7 L2.0002,7 C1.4472,7 1.0002,6.552 1.0002,6 C1.0002,5.448 1.4472,5 2.0002,5 L2.0002,5 L6.6622,5 C6.6622,2.757 9.0072,1 12.0002,1 Z M18.4932,7 L5.5072,7 L6.4962,17.935 C6.5002,19.666 7.8352,21 9.4752,21 L9.4752,21 L14.5242,21 C16.1652,21 17.5002,19.666 17.5002,18.025 L17.5002,18.025 L18.4932,7 Z M12,8.6665 C12.553,8.6665 13,9.1145 13,9.6665 L13,9.6665 L13,18.6665 C13,19.2185 12.553,19.6665 12,19.6665 C11.447,19.6665 11,19.2185 11,18.6665 L11,18.6665 L11,9.6665 C11,9.1145 11.447,8.6665 12,8.6665 Z M15.9961536,8.6664438 L16.1106,8.6732 C16.6596,8.7332 17.0546,9.2282 16.9936,9.7772 L16.9936,9.7772 L15.9936,18.7772 C15.9376,19.2882 15.5036,19.6662 15.0006,19.6662 C14.9636,19.6662 14.9266,19.6642 14.8896,19.6602 C14.3406,19.5992 13.9456,19.1052 14.0056,18.5562 L14.0056,18.5562 L15.0056,9.5562 C15.0676,9.0072 15.5736,8.6092 16.1106,8.6732 Z M7.89,8.6725 C8.446,8.6105 8.934,9.0075 8.994,9.5565 L8.994,9.5565 L9.994,18.5565 C10.055,19.1045 9.659,19.5995 9.11,19.6605 C9.073,19.6645 9.035,19.6665 8.999,19.6665 C8.496,19.6665 8.062,19.2885 8.006,18.7765 L8.006,18.7765 L7.006,9.7765 C6.945,9.2285 7.341,8.7335 7.89,8.6725 Z M12.0002,3 C10.2222,3 8.6622,3.935 8.6622,5 L8.6622,5 L15.3382,5 C15.3382,3.935 13.7782,3 12.0002,3 Z"
            id="Combined-Shape"
            fill={color}
          />
        </g>
      </svg>
    );
  },
);

export const ShareIcon = React.memo(
  ({ width = 1, height = 1, color = '#666', isButton = false }) => {
    const defaultWidth = 24;
    const defaultHeight = 24;

    return (
      <svg
        style={isButton ? {} : { position: 'absolute', left: '1rem' }}
        width={`${width}rem`}
        height={`${height}rem`}
        viewBox={`0 0 ${width * REM_UNIT} ${height * REM_UNIT}`}
        version="1.1"
      >
        <g
          id="Icon/common/share_1"
          stroke="none"
          strokeWidth="1"
          fill="none"
          fillRule="evenodd"
          transform={`scale(${(width * REM_UNIT) / defaultWidth},
          ${(height * REM_UNIT) / defaultHeight})`}
        >
          <path
            d="M17.8098,17.6693 C17.9668,17.6253 18.1248,17.6043 18.2808,17.6043 C19.0318,17.6043 19.7228,18.0943 19.9358,18.8423 C20.0598,19.2743 20.0058,19.7293 19.7868,20.1223 C19.5628,20.5223 19.1958,20.8113 18.7498,20.9353 C17.8398,21.1923 16.8828,20.6663 16.6258,19.7633 L16.6258,19.7623 C16.5018,19.3303 16.5558,18.8753 16.7758,18.4813 C16.9978,18.0823 17.3668,17.7943 17.8098,17.6693 M6.1928,13.6333 C5.2758,13.8913 4.3238,13.3633 4.0668,12.4603 L4.0668,12.4603 C3.9428,12.0273 3.9968,11.5733 4.2158,11.1803 C4.4388,10.7803 4.8068,10.4913 5.2508,10.3663 C5.4088,10.3223 5.5668,10.3013 5.7218,10.3013 C6.4728,10.3013 7.1638,10.7913 7.3758,11.5403 C7.4998,11.9723 7.4468,12.4273 7.2268,12.8203 C7.0038,13.2193 6.6358,13.5083 6.1928,13.6333 M16.7758,3.8763 C16.9978,3.4773 17.3668,3.1893 17.8108,3.0643 C17.9678,3.0203 18.1258,2.9993 18.2818,2.9993 C19.0328,2.9993 19.7228,3.4883 19.9358,4.2373 C20.0598,4.6693 20.0058,5.1243 19.7868,5.5173 C19.5638,5.9173 19.1958,6.2053 18.7508,6.3303 C17.8338,6.5873 16.8828,6.0613 16.6258,5.1573 L16.6258,5.1573 C16.5018,4.7243 16.5558,4.2703 16.7758,3.8763 M4.7108,8.4403 C3.7498,8.7113 2.9548,9.3363 2.4698,10.2043 C1.9888,11.0653 1.8718,12.0613 2.1428,13.0083 C2.6068,14.6333 4.1018,15.6983 5.7238,15.6983 C6.0568,15.6983 6.3958,15.6533 6.7328,15.5593 C7.3948,15.3733 7.9698,15.0073 8.4268,14.5213 L14.7068,18.3123 C14.5248,18.9613 14.5128,19.6473 14.7028,20.3113 C15.1648,21.9363 16.6608,23.0013 18.2818,23.0013 C18.6158,23.0013 18.9548,22.9553 19.2898,22.8613 C20.2508,22.5913 21.0468,21.9653 21.5328,21.0983 C22.0138,20.2373 22.1298,19.2413 21.8598,18.2943 C21.3008,16.3353 19.2478,15.1903 17.2698,15.7433 C16.6908,15.9063 16.1818,16.2113 15.7548,16.6093 L9.3498,12.7423 C9.4688,12.1673 9.4658,11.5713 9.2998,10.9913 C9.2958,10.9783 9.2888,10.9673 9.2858,10.9553 L15.7388,7.3823 C16.4208,8.0183 17.3268,8.3953 18.2828,8.3953 C18.6168,8.3953 18.9558,8.3503 19.2908,8.2563 C20.2518,7.9863 21.0478,7.3603 21.5328,6.4923 C22.0138,5.6313 22.1298,4.6363 21.8598,3.6893 C21.3008,1.7283 19.2368,0.5873 17.2708,1.1383 C16.3098,1.4083 15.5138,2.0333 15.0298,2.9003 C14.5538,3.7523 14.4378,4.7353 14.6968,5.6723 L8.2078,9.2653 C7.2888,8.4423 5.9838,8.0843 4.7108,8.4403"
            id="Fill-1"
            fill={color}
          />
        </g>
      </svg>
    );
  },
);

export const SharedPageIcon = React.memo(
  ({ width = 1, height = 1, color = '#666', isButton = false }) => {
    const defaultWidth = 24;
    const defaultHeight = 24;

    return (
      <svg
        style={isButton ? {} : { position: 'absolute', left: '1rem' }}
        width={`${width}rem`}
        height={`${height}rem`}
        viewBox={`0 0 ${width * REM_UNIT} ${height * REM_UNIT}`}
        version="1.1"
      >
        <g
          id="Icon/common/page_shared"
          stroke="none"
          strokeWidth="1"
          fill="none"
          fillRule="evenodd"
          transform={`scale(${(width * REM_UNIT) / defaultWidth},
          ${(height * REM_UNIT) / defaultHeight})`}
        >
          <path
            d="M21.1402,12.0905 C22.3292,11.7545 23.5772,12.4475 23.9142,13.6345 C24.0782,14.2075 24.0072,14.8105 23.7162,15.3325 C23.4232,15.8575 22.9422,16.2365 22.3602,16.3995 C22.1572,16.4565 21.9522,16.4835 21.7512,16.4835 C21.2572,16.4835 20.7842,16.3205 20.3992,16.0335 L20.3992,16.0335 L17.4962,17.6405 C17.5282,17.8325 17.5412,18.0255 17.5232,18.2155 L17.5232,18.2155 L20.4182,19.9635 C20.6332,19.8055 20.8752,19.6815 21.1402,19.6075 C22.3292,19.2705 23.5772,19.9635 23.9142,21.1515 C24.0782,21.7235 24.0072,22.3275 23.7162,22.8485 C23.4232,23.3735 22.9422,23.7525 22.3602,23.9155 C22.1582,23.9725 21.9532,23.9995 21.7522,23.9995 C20.7702,23.9995 19.8652,23.3555 19.5862,22.3715 C19.4962,22.0545 19.4832,21.7305 19.5332,21.4155 L19.5332,21.4155 L16.7242,19.7195 C16.4852,19.9185 16.2072,20.0705 15.8962,20.1575 C15.6932,20.2135 15.4892,20.2415 15.2872,20.2415 C14.3072,20.2415 13.4032,19.5975 13.1222,18.6145 L13.1222,18.6145 C12.9592,18.0405 13.0292,17.4365 13.3202,16.9155 C13.6132,16.3905 14.0942,16.0115 14.6742,15.8485 C15.3622,15.6575 16.0582,15.8115 16.5952,16.1965 L16.5952,16.1965 L19.5342,14.5695 C19.4612,14.0835 19.5412,13.5915 19.7842,13.1565 C20.0772,12.6315 20.5592,12.2525 21.1402,12.0905 Z M21.7512,21.2225 C21.7002,21.2225 21.6492,21.2295 21.5982,21.2445 C21.4562,21.2845 21.3382,21.3755 21.2672,21.5025 C21.1982,21.6265 21.1812,21.7695 21.2202,21.9055 L21.2202,21.9055 C21.3032,22.1955 21.6112,22.3565 21.9022,22.2795 C22.0442,22.2395 22.1612,22.1475 22.2322,22.0195 C22.3012,21.8955 22.3182,21.7525 22.2792,21.6175 C22.2112,21.3785 21.9912,21.2225 21.7512,21.2225 Z M12.2716,1.0002 C13.2716,1.0002 14.2166,1.3822 14.9336,2.0742 L14.9336,2.0742 L19.8366,6.8062 C20.5756,7.5192 20.9996,8.5162 20.9996,9.5412 L20.9996,9.5412 L20.9996,10.0972 C20.9996,10.6492 20.5526,11.0972 19.9996,11.0972 C19.4466,11.0972 18.9996,10.6492 18.9996,10.0972 L18.9996,10.0972 L18.9996,9.6782 L15.5276,9.6262 C13.7016,9.5992 12.2166,8.0982 12.2166,6.2792 L12.2166,6.2792 L12.2166,3.0002 L7.7086,3.0002 C5.6636,3.0002 3.9996,4.6512 3.9996,6.6812 L3.9996,6.6812 L3.9996,16.0972 C3.9996,18.1262 5.6636,19.7772 7.7086,19.7772 L7.7086,19.7772 L12.2906,19.7772 C12.8436,19.7772 13.2906,20.2242 13.2906,20.7772 C13.2906,21.3302 12.8436,21.7772 12.2906,21.7772 L12.2906,21.7772 L7.7086,21.7772 C4.5616,21.7772 1.9996,19.2292 1.9996,16.0972 L1.9996,16.0972 L1.9996,6.6812 C1.9996,3.5492 4.5616,1.0002 7.7086,1.0002 L7.7086,1.0002 Z M15.8152,17.8585 C15.7332,17.5705 15.4262,17.4005 15.1342,17.4855 C14.9932,17.5255 14.8762,17.6175 14.8042,17.7455 C14.7352,17.8695 14.7182,18.0115 14.7562,18.1475 C14.8392,18.4365 15.1532,18.6045 15.4362,18.5205 C15.5802,18.4805 15.6972,18.3885 15.7682,18.2605 C15.8372,18.1375 15.8542,17.9945 15.8152,17.8585 Z M11.2816,15.083 C11.8346,15.083 12.2816,15.53 12.2816,16.083 C12.2816,16.636 11.8346,17.083 11.2816,17.083 L11.2816,17.083 L7.7176,17.083 C7.1646,17.083 6.7176,16.636 6.7176,16.083 C6.7176,15.53 7.1646,15.083 7.7176,15.083 L7.7176,15.083 Z M21.7512,13.7065 C21.7002,13.7065 21.6492,13.7125 21.5982,13.7275 C21.4562,13.7675 21.3382,13.8595 21.2672,13.9865 C21.1982,14.1105 21.1812,14.2525 21.2202,14.3895 L21.2202,14.3895 C21.3032,14.6785 21.6112,14.8455 21.9012,14.7625 C22.0442,14.7225 22.1612,14.6305 22.2322,14.5025 C22.3012,14.3785 22.3182,14.2365 22.2792,14.1005 C22.2112,13.8625 21.9912,13.7065 21.7512,13.7065 Z M15.282,11.3281 C15.835,11.3281 16.282,11.7751 16.282,12.3281 C16.282,12.8811 15.835,13.3281 15.282,13.3281 L15.282,13.3281 L7.718,13.3281 C7.165,13.3281 6.718,12.8811 6.718,12.3281 C6.718,11.7751 7.165,11.3281 7.718,11.3281 L7.718,11.3281 Z M10.5606,7.5723 C11.1136,7.5723 11.5606,8.0193 11.5606,8.5723 C11.5606,9.1253 11.1136,9.5723 10.5606,9.5723 L10.5606,9.5723 L7.7176,9.5723 C7.1646,9.5723 6.7176,9.1253 6.7176,8.5723 C6.7176,8.0193 7.1646,7.5723 7.7176,7.5723 L7.7176,7.5723 Z M14.2166,4.1622 L14.2166,6.2792 C14.2166,7.0122 14.8186,7.6152 15.5576,7.6262 L15.5576,7.6262 L17.8406,7.6602 L14.2166,4.1622 Z"
            id="Combined-Shape"
            fill={color}
          />
        </g>
      </svg>
    );
  },
);

export const AddTagIcon = React.memo(({ width = 1, height = 1, color = '#666' }) => {
  const defaultWidth = 24;
  const defaultHeight = 24;

  return (
    <svg
      style={{ position: 'absolute', left: '1rem' }}
      width={`${width}rem`}
      height={`${height}rem`}
      viewBox={`0 0 ${width * REM_UNIT} ${height * REM_UNIT}`}
      version="1.1"
    >
      <g
        id="Icon/common/add_tag"
        stroke="none"
        strokeWidth="1"
        fill="none"
        fillRule="evenodd"
        transform={`scale(${(width * REM_UNIT) / defaultWidth},
          ${(height * REM_UNIT) / defaultHeight})`}
      >
        <path
          d="M9.9367,2.0313 C10.7577,2.0313 11.5697,2.2483 12.2827,2.6573 C12.7607,2.9323 12.9267,3.5443 12.6517,4.0223 C12.3757,4.5013 11.7647,4.6653 11.2857,4.3913 C10.8757,4.1563 10.4087,4.0313 9.9367,4.0313 L9.9367,4.0313 L6.7117,4.0313 C5.2167,4.0313 3.9997,5.2493 3.9997,6.7463 L3.9997,6.7463 L3.9997,9.9733 C3.9997,10.6883 4.2887,11.3873 4.7937,11.8923 L4.7937,11.8923 L12.0987,19.2023 C13.1247,20.2283 14.9097,20.2273 15.9327,19.2023 L15.9327,19.2023 L19.1587,15.9753 C19.9777,15.1553 20.1867,13.9043 19.6777,12.8633 C19.4357,12.3673 19.6407,11.7673 20.1367,11.5253 C20.6327,11.2823 21.2317,11.4883 21.4747,11.9843 C22.3587,13.7933 21.9957,15.9643 20.5737,17.3883 L20.5737,17.3883 L17.3477,20.6163 C16.4577,21.5063 15.2757,21.9983 14.0157,21.9983 C12.7567,21.9983 11.5737,21.5063 10.6837,20.6163 L10.6837,20.6163 L3.3797,13.3063 C2.5027,12.4293 1.9997,11.2143 1.9997,9.9733 L1.9997,9.9733 L1.9997,6.7463 C1.9997,4.1463 4.1137,2.0313 6.7117,2.0313 L6.7117,2.0313 Z M8.0488,5.7412 C9.3668,5.7412 10.4398,6.8132 10.4398,8.1332 C10.4398,9.4512 9.3668,10.5232 8.0488,10.5232 C6.7308,10.5232 5.6578,9.4512 5.6578,8.1332 C5.6578,6.8132 6.7308,5.7412 8.0488,5.7412 Z M18.5,0.9999 C19.053,0.9999 19.5,1.4469 19.5,1.9999 L19.5,1.9999 L19.5,4.5009 L22,4.5009 C22.553,4.5009 23,4.9479 23,5.5009 C23,6.0539 22.553,6.5009 22,6.5009 L22,6.5009 L19.5,6.5009 L19.5,9.0009 C19.5,9.5539 19.053,10.0009 18.5,10.0009 C17.947,10.0009 17.5,9.5539 17.5,9.0009 L17.5,9.0009 L17.5,6.5009 L15,6.5009 C14.447,6.5009 14,6.0539 14,5.5009 C14,4.9479 14.447,4.5009 15,4.5009 L15,4.5009 L17.5,4.5009 L17.5,1.9999 C17.5,1.4469 17.947,0.9999 18.5,0.9999 Z M8.0488,7.4402 C7.6678,7.4402 7.3578,7.7512 7.3578,8.1332 C7.3578,8.5132 7.6678,8.8242 8.0488,8.8242 C8.4298,8.8242 8.7398,8.5132 8.7398,8.1332 C8.7398,7.7512 8.4298,7.4402 8.0488,7.4402 Z"
          id="Combined-Shape"
          fill={color}
        />
      </g>
    </svg>
  );
});

export const MaximizeIcon = React.memo(({ width = 1, height = 1, color = '#666' }) => {
  const defaultWidth = 24;
  const defaultHeight = 24;

  return (
    <svg
      width={`${width}rem`}
      height={`${height}rem`}
      viewBox={`0 0 ${width * REM_UNIT} ${height * REM_UNIT}`}
      version="1.1"
    >
      <g
        id="Icon/common/maximize_1"
        stroke="none"
        strokeWidth="1"
        fill="none"
        fillRule="evenodd"
        transform={`scale(${(width * REM_UNIT) / defaultWidth},
          ${(height * REM_UNIT) / defaultHeight})`}
      >
        <path
          d="M9.293,13.293 C9.684,12.902 10.316,12.902 10.707,13.293 C11.098,13.684 11.098,14.316 10.707,14.707 L10.707,14.707 L5.414,20 L8.514,20 C9.066,20 9.514,20.448 9.514,21 C9.514,21.552 9.066,22 8.514,22 L8.514,22 L3.389,22 C3.321,22 3.262,21.971 3.197,21.962 C3.131,21.975 3.067,22 3,22 C2.744,22 2.488,21.902 2.293,21.707 C2.047,21.46 1.974,21.121 2.038,20.803 C2.029,20.735 2,20.673 2,20.604 L2,20.604 L2.019,15.48 C2.02,14.928 2.468,14.483 3.019,14.483 L3.019,14.483 C3.574,14.485 4.02,14.934 4.019,15.486 L4.019,15.486 L4.007,18.579 Z M20.611,2 C20.679,2 20.738,2.029 20.803,2.038 C21.121,1.974 21.461,2.046 21.707,2.293 C21.953,2.54 22.026,2.879 21.962,3.197 C21.971,3.265 22,3.327 22,3.396 L22,3.396 L21.981,8.521 C21.979,9.072 21.532,9.517 20.981,9.517 L20.981,9.517 C20.426,9.515 19.979,9.066 19.981,8.514 L19.981,8.514 L19.993,5.421 L14.707,10.707 C14.512,10.902 14.256,11 14,11 C13.744,11 13.488,10.902 13.293,10.707 C12.902,10.316 12.902,9.684 13.293,9.293 L13.293,9.293 L18.586,4 L15.486,4 C14.934,4 14.486,3.552 14.486,3 C14.486,2.448 14.934,2 15.486,2 L15.486,2 Z"
          id="Combined-Shape"
          fill={color}
        />
      </g>
    </svg>
  );
});

export const MinimizeIcon = React.memo(({ width = 1, height = 1, color = '#666' }) => {
  const defaultWidth = 24;
  const defaultHeight = 24;

  return (
    <svg
      width={`${width}rem`}
      height={`${height}rem`}
      viewBox={`0 0 ${width * REM_UNIT} ${height * REM_UNIT}`}
      version="1.1"
    >
      <g
        id="Icon/common/minimize_1"
        stroke="none"
        strokeWidth="1"
        fill="none"
        fillRule="evenodd"
        transform={`scale(${(width * REM_UNIT) / defaultWidth},
          ${(height * REM_UNIT) / defaultHeight})`}
      >
        <path
          d="M9.611,13 C9.698,13 9.782,13.011 9.864,13.026 C10.164,12.985 10.477,13.062 10.707,13.293 C10.937,13.522 11.015,13.833 10.975,14.131 C10.991,14.217 11,14.306 11,14.396 L11,14.396 L10.981,19.521 C10.979,20.072 10.532,20.517 9.981,20.517 L9.981,20.517 C9.426,20.515 8.979,20.066 8.981,19.514 L8.981,19.514 L8.993,16.421 L2.707,22.707 C2.512,22.902 2.256,23 2,23 C1.744,23 1.488,22.902 1.293,22.707 C0.902,22.316 0.902,21.684 1.293,21.293 L1.293,21.293 L7.586,15 L4.486,15 C3.934,15 3.486,14.552 3.486,14 C3.486,13.448 3.934,13 4.486,13 L4.486,13 Z M21.293,1.293 C21.684,0.902 22.316,0.902 22.707,1.293 C23.098,1.684 23.098,2.316 22.707,2.707 L22.707,2.707 L16.414,9 L19.514,9 C20.066,9 20.514,9.448 20.514,10 C20.514,10.552 20.066,11 19.514,11 L19.514,11 L14.389,11 C14.302,11 14.218,10.989 14.136,10.974 C14.09,10.98 14.046,11 14,11 C13.744,11 13.488,10.902 13.293,10.707 C13.063,10.478 12.985,10.167 13.025,9.869 C13.009,9.783 12.999,9.694 12.9999313,9.604 L12.9999313,9.604 L13.019,4.48 C13.02,3.928 13.468,3.483 14.019,3.483 L14.019,3.483 C14.574,3.485 15.02,3.934 15.019,4.486 L15.019,4.486 L15.007,7.579 Z"
          id="Combined-Shape"
          fill={color}
        />
      </g>
    </svg>
  );
});

export const NormalIcon = React.memo(({ width = 1, height = 1, color = '#666' }) => {
  const defaultWidth = 24;
  const defaultHeight = 24;

  return (
    <svg
      style={{ position: 'absolute', left: '1rem' }}
      width={`${width}rem`}
      height={`${height}rem`}
      viewBox={`0 0 ${width * REM_UNIT} ${height * REM_UNIT}`}
      version="1.1"
    >
      <g
        id="Icon/common/chapter"
        stroke="none"
        strokeWidth="1"
        fill="none"
        fillRule="evenodd"
        transform={`scale(${(width * REM_UNIT) / defaultWidth},
          ${(height * REM_UNIT) / defaultHeight})`}
      >
        <path
          d="M17.5617,1 C20.5607,1 22.9997,3.34 22.9997,6.216 L22.9997,6.216 L22.9997,17.784 C22.9997,20.66 20.5607,23 17.5617,23 L17.5617,23 L7.4927,23 C4.5707,23 2.1857,20.776 2.0657,18 L2.0657,18 L0.9997,18 C0.4477,18 -0.0003,17.552 -0.0003,17 C-0.0003,16.448 0.4477,16 0.9997,16 L0.9997,16 L2.0547,16 L2.0547,13 L0.9997,13 C0.4477,13 -0.0003,12.552 -0.0003,12 C-0.0003,11.448 0.4477,11 0.9997,11 L0.9997,11 L2.0547,11 L2.0547,8 L0.9997,8 C0.4477,8 -0.0003,7.552 -0.0003,7 C-0.0003,6.448 0.4477,6 0.9997,6 L0.9997,6 L2.0657,6 C2.1857,3.224 4.5707,1 7.4927,1 L7.4927,1 Z M17.5617,3 L7.4927,3 C5.6767,3 4.1997,4.329 4.0777,6 L4.0777,6 L5.0097,6 C5.5617,6 6.0097,6.448 6.0097,7 C6.0097,7.552 5.5617,8 5.0097,8 L5.0097,8 L4.0547,8 L4.0547,11 L5.0097,11 C5.5617,11 6.0097,11.448 6.0097,12 C6.0097,12.552 5.5617,13 5.0097,13 L5.0097,13 L4.0547,13 L4.0547,16 L5.0097,16 C5.5617,16 6.0097,16.448 6.0097,17 C6.0097,17.552 5.5617,18 5.0097,18 L5.0097,18 L4.0777,18 C4.1997,19.671 5.6767,21 7.4927,21 L7.4927,21 L17.5617,21 C19.4577,21 20.9997,19.557 20.9997,17.784 L20.9997,17.784 L20.9997,6.216 C20.9997,4.443 19.4577,3 17.5617,3 L17.5617,3 Z M16.009,16 C16.562,16 17.009,16.448 17.009,17 C17.009,17.552 16.562,18 16.009,18 L16.009,18 L10,18 C9.448,18 9,17.552 9,17 C9,16.448 9.448,16 10,16 L10,16 Z M16.009,11 C16.562,11 17.009,11.448 17.009,12 C17.009,12.552 16.562,13 16.009,13 L16.009,13 L10,13 C9.448,13 9,12.552 9,12 C9,11.448 9.448,11 10,11 L10,11 Z M16.009,6 C16.562,6 17.009,6.448 17.009,7 C17.009,7.552 16.562,8 16.009,8 L16.009,8 L10,8 C9.448,8 9,7.552 9,7 C9,6.448 9.448,6 10,6 L10,6 Z"
          id="Combined-Shape"
          fill={color}
        />
      </g>
    </svg>
  );
});
